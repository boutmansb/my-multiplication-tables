{"version":3,"sources":["Components/SelectTableButton.tsx","Components/ExerciseTest.tsx","Views/ExerciseView.tsx","Views/ResultView.tsx","App.tsx"],"names":["SelectTableButton","props","React","useState","selectedTables","indexOf","value","selected","setSelected","TouchableOpacity","style","styles","tableSelectedButton","onPress","onDeselectTablePress","Text","buttonText","toString","tableSelectButton","onSelectTablePress","StyleSheet","create","backgroundColor","padding","borderRadius","margin","fontSize","color","ExerciseTest","number","onChangeNumber","View","exercise","multiplier","root","TextInput","input","onChangeText","placeholder","keyboardType","result","success","fail","button","handleNextPress","handleInputCheck","fontWeight","marginBottom","height","borderWidth","ExerciseView","sortedTables","i","push","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","generateShuffledExercises","tables","setTables","currentExercise","setCurrentExercise","lastResult","setLastResult","setMultiplier","setRoot","saveFinalExercises","oldTables","currentEx","test","handleReturnToStartScreen","instructions","renderExcerciseTest","ResultView","isCorrect","ex","index","total","filter","renderFinalResult","App","setSelectedTables","viewState","setViewState","totalResult","setTotalResult","addNumberToSelectedTables","num","removeNumberFromSelectedTables","splice","returnToStartScreen","container","tablesSelector","StatusBar","exercises","flex","alignItems","justifyContent","flexDirection"],"mappings":"uMAGe,SAASA,EAAkBC,GACtC,MAAgCC,IAAMC,SAASF,EAAMG,eAAeC,QAAQJ,EAAMK,QAAU,GAA5F,WAAOC,EAAP,KAAiBC,EAAjB,KAqBA,OAlBoB,IAAbD,EAEC,cAACE,EAAA,EAAD,CACIC,MAAOC,EAAOC,oBACdC,QAAS,WAAOL,GAAY,GAAQP,EAAMa,qBAAqBb,EAAMK,QAFzE,SAII,cAACS,EAAA,EAAD,CAAML,MAAOC,EAAOK,WAApB,SAAiCf,EAAMK,MAAMW,eAIjD,cAACR,EAAA,EAAD,CACIC,MAAOC,EAAOO,kBACdL,QAAS,WAAOL,GAAY,GAAOP,EAAMkB,mBAAmBlB,EAAMK,QAFtE,SAII,cAACS,EAAA,EAAD,CAAML,MAAOC,EAAOK,WAApB,SAAiCf,EAAMK,MAAMW,eAS7D,IAAMN,EAASS,IAAWC,OAAO,CAC7BH,kBAAmB,CACjBI,gBAAiB,OACjBC,QAAS,GACTC,aAAc,EACdC,OAAQ,GAEVb,oBAAqB,CACnBU,gBAAiB,QACjBC,QAAS,GACTC,aAAc,EACdC,OAAQ,GAEVT,WAAY,CACVU,SAAU,GACVC,MAAO,U,QCzCE,SAASC,EAAa3B,GACjC,MAAiCC,IAAMC,SAAS,MAAhD,WAAO0B,EAAP,KAAeC,EAAf,KAkCA,OACI,eAACC,EAAA,EAAD,WACI,eAAChB,EAAA,EAAD,CAAML,MAAOC,EAAOqB,SAApB,UAA+B/B,EAAMgC,WAArC,MAAoDhC,EAAMiC,KAA1D,QACA,cAACC,EAAA,EAAD,CACIzB,MAAOC,EAAOyB,MACdC,aAAcP,EACdxB,MAAOuB,EACPS,YAAY,YACZC,aAAa,aAjBA,IAAjBtC,EAAMuC,OACE,cAACzB,EAAA,EAAD,CAAML,MAAOC,EAAO8B,QAApB,sBAES,IAAjBxC,EAAMuC,OACE,cAACzB,EAAA,EAAD,CAAML,MAAOC,EAAO+B,KAApB,uBADZ,EAzBqB,OAAjBzC,EAAMuC,OAEF,cAAC/B,EAAA,EAAD,CACIC,MAAOC,EAAOgC,OACd9B,QAAS,WAAOiB,EAAe,IAAK7B,EAAM2C,mBAF9C,SAII,cAAC7B,EAAA,EAAD,CAAML,MAAOC,EAAOK,WAApB,wBAKJ,cAACP,EAAA,EAAD,CACIC,MAAOC,EAAOgC,OACd9B,QAAS,kBAAMZ,EAAM4C,iBAAiBhB,IAF1C,SAII,cAACd,EAAA,EAAD,CAAML,MAAOC,EAAOK,WAApB,yBAiCpB,IAAML,EAASS,IAAWC,OAAO,CAC7BW,SAAU,CACRL,MAAO,OACPD,SAAU,GACVoB,WAAY,OACZC,aAAc,IAEhBJ,OAAQ,CACJrB,gBAAiB,OACjBC,QAAS,GACTC,aAAc,EACdC,OAAQ,GAERT,WAAY,CACZU,SAAU,GACVC,MAAO,QAEXS,MAAO,CACHY,OAAQ,GACRvB,OAAQ,GACRwB,YAAa,EACb1B,QAAS,IAEbkB,QAAS,CACLd,MAAO,SAEXe,KAAM,CACFf,MAAM,SC7EC,SAASuB,EAAajD,GAOjC,MAA4BC,IAAMC,SAMlC,WACI,IAAI+B,EACAiB,EAAe,GACnB,IAAIjB,KAAQjC,EAAMG,eACd,IAAI,IAAIgD,EAAI,EAAEA,GAAG,GAAGA,IAChBD,EAAaE,KAAK,CAACnB,KAAMjC,EAAMG,eAAe8B,GAAOD,WAAYmB,EAAGZ,OAAQ,OAIpF,OAGJ,SAAiBc,GACb,IAAkCC,EAA9BC,EAAeF,EAAMG,OAGzB,KAAuB,GAAhBD,GAAmB,CAGxBD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,IAJwB,MAOoB,CAC1CF,EAAMC,GAAcD,EAAME,IAD3BF,EAAME,GAPiB,KAOFF,EAAMC,GAPJ,KAW1B,OAAOD,EAlBAO,CAAQV,GAfoCW,IAAvD,WAAOC,EAAP,KAAeC,EAAf,KACA,EAA8C9D,IAAMC,SAAS,GAA7D,WAAO8D,EAAP,KAAwBC,EAAxB,KACA,EAAoChE,IAAMC,SAAS,MAAnD,WAAOgE,EAAP,KAAmBC,EAAnB,KACA,EAAoClE,IAAMC,SAAS4D,EAAOE,GAAiBhC,YAA3E,WAAOA,EAAP,KAAmBoC,EAAnB,KACA,EAAwBnE,IAAMC,SAAS4D,EAAOE,GAAiB/B,MAA/D,WAAOA,EAAP,KAAaoC,EAAb,KAgCA,SAAS1B,IACAmB,EAAON,OAAQ,EAAKQ,GACrBC,EAAmBD,EAAkB,GACrCG,EAAc,MACdC,EAAcN,EAAOE,EAAkB,GAAGhC,YAC1CqC,EAAQP,EAAOE,EAAkB,GAAG/B,OAEpCjC,EAAMsE,mBAAmBR,GAIjC,SAASlB,EAAiBT,GACtB,IAAIoC,EAAYT,EACZU,EAAYD,EAAUP,GACtBS,EAAOD,EAAUxC,WAAawC,EAAUvC,KAE5CuC,EAAUjC,OAASkC,GAAQtC,EAE3BoC,EAAUP,GAAmBQ,EAC7BT,EAAUQ,GACVJ,EAAcK,EAAUjC,QAS5B,OACI,eAACT,EAAA,EAAD,WACI,cAACtB,EAAA,EAAD,CACIC,MAAOC,EAAOgC,OACd9B,QAAS,kBAAMZ,EAAM0E,6BAFzB,SAII,cAAC5D,EAAA,EAAD,CAAML,MAAOC,EAAOK,WAApB,gCAGJ,cAACD,EAAA,EAAD,CAAML,MAAOC,EAAOiE,aAApB,2CAfR,WACI,GAAIb,IAAW,GACX,OAAQ,cAACnC,EAAD,CAAcK,WAAYA,EAAYC,KAAMA,EAAMM,OAAQ2B,EAAYvB,gBAAiBA,EAAiBC,iBAAkBA,IAcjIgC,MAMb,IAAMlE,EAASS,IAAWC,OAAO,CAC7BuD,aAAc,CACVjD,MAAO,OACPD,SAAU,GACVqB,aAAc,IAElBJ,OAAQ,CACJrB,gBAAiB,OACjBC,QAAS,GACTC,aAAc,EACdC,OAAQ,GAEZT,WAAY,CACRU,SAAU,GACVC,MAAO,UCzGA,SAASmD,EAAW7E,GAE/B,SAAS8E,EAAUC,EAAIC,EAAO3B,GAC1B,OAAqB,IAAd0B,EAAGxC,OAUd,OACI,eAACT,EAAA,EAAD,WACI,cAAChB,EAAA,EAAD,CAAML,MAAOC,EAAOiE,aAApB,uEACA,cAAC7D,EAAA,EAAD,CAAML,MAAOC,EAAOiE,aAApB,SAVR,WACI,IAAIM,EAAQjF,EAAMuC,OAAOiB,OAGzB,MAAM,eAFYxD,EAAMuC,OAAO2C,OAAOJ,GAAWtB,OAEjD,IAAqCyB,EAArC,IAMuCE,KAEnC,cAAC3E,EAAA,EAAD,CACIC,MAAOC,EAAOgC,OACd9B,QAAS,kBAAMZ,EAAM0E,6BAFzB,SAII,cAAC5D,EAAA,EAAD,CAAML,MAAOC,EAAOK,WAApB,oCAOhB,IAAML,EAASS,IAAWC,OAAO,CAC7BuD,aAAc,CACZjD,MAAO,OACPD,SAAU,GACVqB,aAAc,IAEhBJ,OAAQ,CACJrB,gBAAiB,OACjBC,QAAS,GACTC,aAAc,EACdC,OAAQ,GAEZT,WAAY,CACRU,SAAU,GACVC,MAAO,UC/BA,SAAS0D,IACtB,MAA4CnF,IAAMC,SAAS,IAA3D,WAAOC,EAAP,KAAuBkF,EAAvB,KACA,EAAkCpF,IAAMC,SAAoB,aAA5D,WAAOoF,EAAP,KAAkBC,EAAlB,KACA,EAAsCtF,IAAMC,SAAqB,IAAjE,WAAOsF,EAAP,KAAoBC,EAApB,KAEA,SAASC,EAA0BC,IACI,IAAjCxF,EAAeC,QAAQuF,IACzBxF,EAAeiD,KAAKuC,GAIxB,SAASC,EAA+BD,GACtCxF,EAAe0F,OAAO1F,EAAeC,QAAQuF,GAAM,GAQrD,SAASG,IACPT,EAAkB,IAClBE,EAAa,aAGf,MAAiB,cAAdD,EAEC,eAACxD,EAAA,EAAD,CAAMrB,MAAOC,EAAOqF,UAApB,UAEE,cAACjF,EAAA,EAAD,CAAML,MAAOC,EAAOiE,aAApB,sDAEA,eAAC7C,EAAA,EAAD,CAAMrB,MAAOC,EAAOsF,eAApB,UACE,cAACjG,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,EAAGF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,IAClI,cAAC7F,EAAD,CAAmBM,MAAO,GAAIF,eAAgBA,EAAgBe,mBAAoBwE,EAA2B7E,qBAAsB+E,OAGrI,cAACpF,EAAA,EAAD,CACIC,MAAOC,EAAOgC,OACd9B,QAAS,kBAAM2E,EAAa,aAFhC,SAIM,cAACzE,EAAA,EAAD,CAAML,MAAOC,EAAOK,WAApB,yBAGN,cAACkF,EAAA,EAAD,CAAWxF,MAAM,YAIA,aAAd6E,EAEL,eAACxD,EAAA,EAAD,CAAMrB,MAAOC,EAAOqF,UAApB,UACE,cAAC9C,EAAD,CAAc9C,eAAgBA,EAAgBmE,mBA3CpD,SAA4B4B,GAC1BT,EAAeS,GACfX,EAAa,YAyC6Eb,0BAA2BoB,IAEjH,cAACG,EAAA,EAAD,CAAWxF,MAAM,YAIA,YAAd6E,EAEL,eAACxD,EAAA,EAAD,CAAMrB,MAAOC,EAAOqF,UAApB,UACE,cAAClB,EAAD,CAAYtC,OAAQiD,EAAad,0BAA2BoB,IAE5D,cAACG,EAAA,EAAD,CAAWxF,MAAM,iBALlB,EAWP,IAAMC,EAASS,IAAWC,OAAO,CAC/B2E,UAAW,CACTI,KAAM,EACN9E,gBAAiB,OACjB+E,WAAY,SACZC,eAAgB,UAElBL,eAAgB,CACd3E,gBAAiB,OACjB+E,WAAY,SACZC,eAAgB,SAChBC,cAAe,OAEjB3B,aAAc,CACZjD,MAAO,OACPD,SAAU,GACVqB,aAAc,IAEhBJ,OAAQ,CACNrB,gBAAiB,OACjBC,QAAS,GACTC,aAAc,EACdC,OAAQ,GAEVT,WAAY,CACVU,SAAU,GACVC,MAAO,W","file":"static/js/app.0bd4931d.chunk.js","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity } from 'react-native';\n\nexport default function SelectTableButton(props) {\n    const [selected, setSelected] = React.useState(props.selectedTables.indexOf(props.value) > -1);\n\n    let klikker;\n        if(selected === true) {\n        klikker =\n            <TouchableOpacity\n                style={styles.tableSelectedButton}\n                onPress={() => {setSelected(false); props.onDeselectTablePress(props.value)}}\n                >\n                <Text style={styles.buttonText}>{props.value.toString()}</Text>\n            </TouchableOpacity>\n        } else {\n        klikker=\n            <TouchableOpacity\n                style={styles.tableSelectButton}\n                onPress={() => {setSelected(true); props.onSelectTablePress(props.value)}}\n                >\n                <Text style={styles.buttonText}>{props.value.toString()}</Text>\n            </TouchableOpacity>\n        }\n\n    return (\n        klikker\n    );\n}\n\nconst styles = StyleSheet.create({\n    tableSelectButton: {\n      backgroundColor: 'blue',\n      padding: 20,\n      borderRadius: 5,\n      margin: 5\n    },\n    tableSelectedButton: {\n      backgroundColor: 'green',\n      padding: 20,\n      borderRadius: 5,\n      margin: 5\n    },\n    buttonText: {\n      fontSize: 20,\n      color: '#fff'\n    },\n  });","import React, { useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, TextInput } from 'react-native';\n\n\nexport default function ExerciseTest(props) {\n    const [number, onChangeNumber] = React.useState(null);\n\n    function renderNextButton() {\n        if (props.result !== null) {\n            return (\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => {onChangeNumber(''); props.handleNextPress()}}\n                    >\n                    <Text style={styles.buttonText}>Volgende</Text>\n                </TouchableOpacity>\n            );\n        } else {\n            return(\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => props.handleInputCheck(number)}\n                    >\n                    <Text style={styles.buttonText}>Klaar.</Text>\n                </TouchableOpacity>\n            );\n        }\n    }\n\n    function renderResult() {\n        if (props.result === true) {\n            return (<Text style={styles.success}>Correct</Text>)\n        }\n        if (props.result === false) {\n            return (<Text style={styles.fail}>Fout</Text>)\n        }\n    }\n\n\n    return (\n        <View>\n            <Text style={styles.exercise}>{props.multiplier} x {props.root} =</Text>\n            <TextInput\n                style={styles.input}\n                onChangeText={onChangeNumber}\n                value={number}\n                placeholder=\"resultaat\"\n                keyboardType=\"numeric\"\n            />\n            {renderResult()}\n            {renderNextButton()}\n        </View>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    exercise: {\n      color: '#888',\n      fontSize: 21,\n      fontWeight: 'bold',\n      marginBottom: 15\n    },\n    button: {\n        backgroundColor: 'blue',\n        padding: 20,\n        borderRadius: 5,\n        margin: 5\n    },\n        buttonText: {\n        fontSize: 20,\n        color: '#fff'\n    },\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n    success: {\n        color: 'green'\n    },\n    fail: {\n        color:'red'\n    }\n  });","import React, { useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport ExerciseTest from '../Components/ExerciseTest';\n\n\n\nexport default function ExerciseView(props) {\n    interface Exercise {\n        root: number,\n        multiplier: number,\n        result: null|boolean\n    }\n\n    const [tables, setTables] = React.useState<Exercise[]>(generateShuffledExercises());\n    const [currentExercise, setCurrentExercise] = React.useState(0);\n    const [lastResult, setLastResult] = React.useState(null)\n    const [multiplier, setMultiplier] = React.useState(tables[currentExercise].multiplier)\n    const [root, setRoot] = React.useState(tables[currentExercise].root)\n\n    function generateShuffledExercises() {\n        var root:any;\n        var sortedTables = [];\n        for(root in props.selectedTables) {\n            for(var i = 1;i<=10;i++) {\n                sortedTables.push({root: props.selectedTables[root], multiplier: i, result: null});\n             }\n         }\n\n        return(shuffle(sortedTables));\n    }\n\n    function shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n\n        // While there remain elements to shuffle...\n        while (currentIndex != 0) {\n\n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n\n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    }\n\n    function handleNextPress() {\n        if ((tables.length -1) > currentExercise) {\n            setCurrentExercise(currentExercise + 1);\n            setLastResult(null);\n            setMultiplier(tables[currentExercise + 1].multiplier);\n            setRoot(tables[currentExercise + 1].root);\n        } else {\n            props.saveFinalExercises(tables);\n        }\n    }\n\n    function handleInputCheck(input) {\n        let oldTables = tables;\n        let currentEx = oldTables[currentExercise];\n        let test = currentEx.multiplier * currentEx.root;\n\n        currentEx.result = test == input;\n\n        oldTables[currentExercise] = currentEx;\n        setTables(oldTables);\n        setLastResult(currentEx.result);\n    }\n\n    function renderExcerciseTest() {\n        if (tables !== []) {\n            return (<ExerciseTest multiplier={multiplier} root={root} result={lastResult} handleNextPress={handleNextPress} handleInputCheck={handleInputCheck} />);\n        }\n    }\n\n    return (\n        <View>\n            <TouchableOpacity\n                style={styles.button}\n                onPress={() => props.handleReturnToStartScreen()}\n                >\n                <Text style={styles.buttonText}>Terug naar begin</Text>\n            </TouchableOpacity>\n\n            <Text style={styles.instructions}>Hier komen dan de oefeningen!</Text>\n            {renderExcerciseTest()}\n        </View>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    instructions: {\n        color: '#888',\n        fontSize: 18,\n        marginBottom: 15\n    },\n    button: {\n        backgroundColor: 'blue',\n        padding: 20,\n        borderRadius: 5,\n        margin: 5\n    },\n    buttonText: {\n        fontSize: 20,\n        color: '#fff'\n    },\n  });","import React, { useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function ResultView(props) {\n\n    function isCorrect(ex, index, array) {\n        return ex.result === true;\n    }\n\n    function renderFinalResult() {\n        let total = props.result.length;\n        let correctOnes = props.result.filter(isCorrect).length;\n\n        return `Je score is ${correctOnes}/${total}.`;\n    }\n\n    return (\n        <View>\n            <Text style={styles.instructions}>Hier komen dan de resultaten van de ingevulde oefeningen!</Text>\n            <Text style={styles.instructions}>{renderFinalResult()}</Text>\n\n            <TouchableOpacity\n                style={styles.button}\n                onPress={() => props.handleReturnToStartScreen()}\n                >\n                <Text style={styles.buttonText}>Terug naar begin!</Text>\n            </TouchableOpacity>\n        </View>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    instructions: {\n      color: '#888',\n      fontSize: 18,\n      marginBottom: 15\n    },\n    button: {\n        backgroundColor: 'blue',\n        padding: 20,\n        borderRadius: 5,\n        margin: 5\n    },\n    buttonText: {\n        fontSize: 20,\n        color: '#fff'\n    },\n  });","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport SelectTableButton from './Components/SelectTableButton';\nimport ExerciseView from './Views/ExerciseView';\nimport ResultView from './Views/ResultView';\n\ntype ViewState = \"selection\" | \"exercise\" | \"results\";\n\ninterface Exercise {\n  root: number,\n  multiplier: number,\n  result: boolean\n}\n\nexport default function App() {\n  const [selectedTables, setSelectedTables] = React.useState([]);\n  const [viewState, setViewState] = React.useState<ViewState>(\"selection\");\n  const [totalResult, setTotalResult] = React.useState<Exercise[]>([]);\n\n  function addNumberToSelectedTables(num) {\n    if (selectedTables.indexOf(num) === -1) {\n      selectedTables.push(num);\n    }\n  }\n\n  function removeNumberFromSelectedTables(num) {\n    selectedTables.splice(selectedTables.indexOf(num), 1);\n  }\n\n  function saveFinalExercises(exercises) {\n    setTotalResult(exercises);\n    setViewState(\"results\");\n  }\n\n  function returnToStartScreen() {\n    setSelectedTables([]);\n    setViewState(\"selection\");\n  }\n\n  if(viewState === \"selection\") {\n    return (\n      <View style={styles.container}>\n\n        <Text style={styles.instructions}>Selecteer de tafels die je wilt oefenen.</Text>\n\n        <View style={styles.tablesSelector}>\n          <SelectTableButton value={1} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={2} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={3} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={4} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={5} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={6} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={7} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={8} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={9} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={10} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n        </View>\n\n        <TouchableOpacity\n            style={styles.button}\n            onPress={() => setViewState(\"exercise\")}\n            >\n              <Text style={styles.buttonText}>Invullen!</Text>\n        </TouchableOpacity>\n\n        <StatusBar style=\"auto\" />\n      </View>\n    );\n  }\n  else if (viewState === \"exercise\") {\n    return(\n      <View style={styles.container}>\n        <ExerciseView selectedTables={selectedTables} saveFinalExercises={saveFinalExercises} handleReturnToStartScreen={returnToStartScreen} />\n\n        <StatusBar style=\"auto\" />\n      </View>\n    );\n  }\n  else if (viewState === \"results\") {\n    return(\n      <View style={styles.container}>\n        <ResultView result={totalResult} handleReturnToStartScreen={returnToStartScreen} />\n\n        <StatusBar style=\"auto\" />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  tablesSelector: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  instructions: {\n    color: '#888',\n    fontSize: 18,\n    marginBottom: 15\n  },\n  button: {\n    backgroundColor: 'blue',\n    padding: 20,\n    borderRadius: 5,\n    margin: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n});\n"],"sourceRoot":""}