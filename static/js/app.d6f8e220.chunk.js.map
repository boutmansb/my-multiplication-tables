{"version":3,"sources":["Components/SelectTableButton.tsx","Components/ExerciseTest.tsx","Views/ExerciseView.tsx","Views/ResultView.tsx","App.tsx"],"names":["SelectTableButton","props","React","useState","selectedTables","indexOf","value","selected","setSelected","TouchableOpacity","style","styles","tableSelectedButton","onPress","onDeselectTablePress","Text","buttonText","toString","tableSelectButton","onSelectTablePress","StyleSheet","create","backgroundColor","padding","borderRadius","margin","fontSize","color","ExerciseTest","number","onChangeNumber","resultInput","useRef","View","resultContainer","result","success","fail","exerciseContainer","exercise","multiplier","root","TextInput","input","onChangeText","placeholder","keyboardType","editable","ref","buttonContainer","button","handleNextPress","current","focus","handleInputCheck","fontWeight","height","borderWidth","alignItems","flexDirection","justifyContent","ExerciseView","sortedTables","i","push","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","generateShuffledExercises","tables","setTables","currentExercise","setCurrentExercise","lastResult","setLastResult","setMultiplier","setRoot","saveFinalExercises","oldTables","currentEx","test","backContainer","handleReturnToStartScreen","instructions","renderExcerciseTest","marginBottom","flex","ResultView","isCorrect","ex","index","total","filter","renderFinalResult","App","setSelectedTables","viewState","setViewState","totalResult","setTotalResult","addNumberToSelectedTables","num","removeNumberFromSelectedTables","splice","returnToStartScreen","container","tablesSelector","StatusBar","exercises"],"mappings":"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","file":"static/js/app.d6f8e220.chunk.js","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity } from 'react-native';\n\nexport default function SelectTableButton(props) {\n    const [selected, setSelected] = React.useState(props.selectedTables.indexOf(props.value) > -1);\n\n    let klikker;\n        if(selected === true) {\n        klikker =\n            <TouchableOpacity\n                style={styles.tableSelectedButton}\n                onPress={() => {setSelected(false); props.onDeselectTablePress(props.value)}}\n                >\n                <Text style={styles.buttonText}>{props.value.toString()}</Text>\n            </TouchableOpacity>\n        } else {\n        klikker=\n            <TouchableOpacity\n                style={styles.tableSelectButton}\n                onPress={() => {setSelected(true); props.onSelectTablePress(props.value)}}\n                >\n                <Text style={styles.buttonText}>{props.value.toString()}</Text>\n            </TouchableOpacity>\n        }\n\n    return (\n        klikker\n    );\n}\n\nconst styles = StyleSheet.create({\n    tableSelectButton: {\n      backgroundColor: 'blue',\n      padding: 20,\n      borderRadius: 5,\n      margin: 5\n    },\n    tableSelectedButton: {\n      backgroundColor: 'green',\n      padding: 20,\n      borderRadius: 5,\n      margin: 5\n    },\n    buttonText: {\n      fontSize: 20,\n      color: '#fff'\n    },\n  });","import React, { useEffect, useRef } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, TextInput } from 'react-native';\n\n\nexport default function ExerciseTest(props) {\n    const [number, onChangeNumber] = React.useState('');\n    const resultInput = useRef<TextInput>(null);\n\n    function renderNextButton() {\n        if (props.result !== null) {\n            return (\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => {onChangeNumber(''); props.handleNextPress(); resultInput.current.focus()}}\n                    >\n                    <Text style={styles.buttonText}>Volgende oefening!</Text>\n                </TouchableOpacity>\n            );\n        } else {\n            return(\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => props.handleInputCheck(number)}\n                    >\n                    <Text style={styles.buttonText}>Klaar!</Text>\n                </TouchableOpacity>\n            );\n        }\n    }\n\n    function renderResult() {\n        if (props.result === true) {\n            return (<Text style={styles.success}>Goed gedaan!</Text>)\n        }\n        if (props.result === false) {\n            return (<Text style={styles.fail}>Oeps, niet helemaal juist.</Text>)\n        }\n    }\n\n\n    return (\n        <View>\n            <View style={styles.resultContainer}>\n                {renderResult()}\n            </View>\n            <View style={styles.exerciseContainer}>\n                <Text style={styles.exercise}>{props.multiplier} x {props.root} =</Text>\n                <TextInput\n                    style={styles.input}\n                    onChangeText={onChangeNumber}\n                    value={number}\n                    placeholder=\"vul hier de oplossing in\"\n                    keyboardType=\"numeric\"\n                    editable={props.result === null}\n                    ref={resultInput}\n                />\n            </View>\n\n            <View style={styles.buttonContainer}>\n                {renderNextButton()}\n            </View>\n        </View>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    exercise: {\n      color: '#888',\n      fontSize: 27,\n      fontWeight: 'bold'\n    },\n    button: {\n        backgroundColor: 'blue',\n        padding: 20,\n        borderRadius: 5,\n        margin: 5\n    },\n    buttonText: {\n        fontSize: 20,\n        color: '#fff'\n    },\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n    success: {\n        color: 'green',\n        fontSize: 18,\n        fontWeight: 'bold'\n    },\n    fail: {\n        color:'red',\n        fontSize: 18,\n        fontWeight: 'bold'\n    },\n    exerciseContainer: {\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    buttonContainer: {\n        alignItems: 'center'\n    },\n    resultContainer: {\n        alignItems: 'center'\n    }\n  });","import React, { useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport ExerciseTest from '../Components/ExerciseTest';\n\n\n\nexport default function ExerciseView(props) {\n    interface Exercise {\n        root: number,\n        multiplier: number,\n        result: null|boolean\n    }\n\n    const [tables, setTables] = React.useState<Exercise[]>(generateShuffledExercises());\n    const [currentExercise, setCurrentExercise] = React.useState(0);\n    const [lastResult, setLastResult] = React.useState(null)\n    const [multiplier, setMultiplier] = React.useState(tables[currentExercise].multiplier)\n    const [root, setRoot] = React.useState(tables[currentExercise].root)\n\n    function generateShuffledExercises() {\n        var root:any;\n        var sortedTables = [];\n        for(root in props.selectedTables) {\n            for(var i = 1;i<=10;i++) {\n                sortedTables.push({root: props.selectedTables[root], multiplier: i, result: null});\n             }\n         }\n\n        return(shuffle(sortedTables));\n    }\n\n    function shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n\n        // While there remain elements to shuffle...\n        while (currentIndex != 0) {\n\n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n\n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    }\n\n    function handleNextPress() {\n        if ((tables.length -1) > currentExercise) {\n            setCurrentExercise(currentExercise + 1);\n            setLastResult(null);\n            setMultiplier(tables[currentExercise + 1].multiplier);\n            setRoot(tables[currentExercise + 1].root);\n        } else {\n            props.saveFinalExercises(tables);\n        }\n    }\n\n    function handleInputCheck(input) {\n        let oldTables = tables;\n        let currentEx = oldTables[currentExercise];\n        let test = currentEx.multiplier * currentEx.root;\n\n        currentEx.result = test == input;\n\n        oldTables[currentExercise] = currentEx;\n        setTables(oldTables);\n        setLastResult(currentEx.result);\n    }\n\n    function renderExcerciseTest() {\n        if (tables !== []) {\n            return (<ExerciseTest multiplier={multiplier} root={root} result={lastResult} handleNextPress={handleNextPress} handleInputCheck={handleInputCheck} />);\n        }\n    }\n\n    return (\n        <View>\n\n            <View style={styles.backContainer}>\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => props.handleReturnToStartScreen()}\n                    >\n                    <Text style={styles.buttonText}>Terug naar begin</Text>\n                </TouchableOpacity>\n            </View>\n\n\n            <Text style={styles.instructions}>Los de oefening op en vul het resultaat in. Druk daarna op 'Klaar'!</Text>\n            {renderExcerciseTest()}\n        </View>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    instructions: {\n        color: '#888',\n        fontSize: 18,\n        marginBottom: 15\n    },\n    button: {\n        backgroundColor: 'blue',\n        padding: 20,\n        borderRadius: 5,\n        margin: 5\n    },\n    buttonText: {\n        fontSize: 20,\n        color: '#fff'\n    },\n    backContainer: {\n        flex: 1,\n        justifyContent: 'flex-end',\n        alignItems: 'flex-start',\n        marginBottom: 16\n    }\n  });","import React, { useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function ResultView(props) {\n\n    function isCorrect(ex, index, array) {\n        return ex.result === true;\n    }\n\n    function renderFinalResult() {\n        let total = props.result.length;\n        let correctOnes = props.result.filter(isCorrect).length;\n\n        return `Je score is ${correctOnes}/${total}.`;\n    }\n\n    return (\n        <View>\n            <Text style={styles.instructions}>Hier komen dan de resultaten van de ingevulde oefeningen!</Text>\n            <Text style={styles.instructions}>{renderFinalResult()}</Text>\n\n            <TouchableOpacity\n                style={styles.button}\n                onPress={() => props.handleReturnToStartScreen()}\n                >\n                <Text style={styles.buttonText}>Terug naar begin!</Text>\n            </TouchableOpacity>\n        </View>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    instructions: {\n      color: '#888',\n      fontSize: 18,\n      marginBottom: 15\n    },\n    button: {\n        backgroundColor: 'blue',\n        padding: 20,\n        borderRadius: 5,\n        margin: 5\n    },\n    buttonText: {\n        fontSize: 20,\n        color: '#fff'\n    },\n  });","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport SelectTableButton from './Components/SelectTableButton';\nimport ExerciseView from './Views/ExerciseView';\nimport ResultView from './Views/ResultView';\n\ntype ViewState = \"selection\" | \"exercise\" | \"results\";\n\ninterface Exercise {\n  root: number,\n  multiplier: number,\n  result: boolean\n}\n\nexport default function App() {\n  const [selectedTables, setSelectedTables] = React.useState([]);\n  const [viewState, setViewState] = React.useState<ViewState>(\"selection\");\n  const [totalResult, setTotalResult] = React.useState<Exercise[]>([]);\n\n  function addNumberToSelectedTables(num) {\n    if (selectedTables.indexOf(num) === -1) {\n      selectedTables.push(num);\n    }\n  }\n\n  function removeNumberFromSelectedTables(num) {\n    selectedTables.splice(selectedTables.indexOf(num), 1);\n  }\n\n  function saveFinalExercises(exercises) {\n    setTotalResult(exercises);\n    setViewState(\"results\");\n  }\n\n  function returnToStartScreen() {\n    setSelectedTables([]);\n    setViewState(\"selection\");\n  }\n\n  if(viewState === \"selection\") {\n    return (\n      <View style={styles.container}>\n\n        <Text style={styles.instructions}>Selecteer de tafels die je wilt oefenen.</Text>\n\n        <View style={styles.tablesSelector}>\n          <SelectTableButton value={1} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={2} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={3} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={4} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={5} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={6} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={7} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={8} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={9} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n          <SelectTableButton value={10} selectedTables={selectedTables} onSelectTablePress={addNumberToSelectedTables} onDeselectTablePress={removeNumberFromSelectedTables} />\n        </View>\n\n        <TouchableOpacity\n            style={styles.button}\n            onPress={() => setViewState(\"exercise\")}\n            >\n              <Text style={styles.buttonText}>Invullen!</Text>\n        </TouchableOpacity>\n\n        <StatusBar style=\"auto\" />\n      </View>\n    );\n  }\n  else if (viewState === \"exercise\") {\n    return(\n      <View style={styles.container}>\n        <ExerciseView selectedTables={selectedTables} saveFinalExercises={saveFinalExercises} handleReturnToStartScreen={returnToStartScreen} />\n\n        <StatusBar style=\"auto\" />\n      </View>\n    );\n  }\n  else if (viewState === \"results\") {\n    return(\n      <View style={styles.container}>\n        <ResultView result={totalResult} handleReturnToStartScreen={returnToStartScreen} />\n\n        <StatusBar style=\"auto\" />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  tablesSelector: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  instructions: {\n    color: '#888',\n    fontSize: 18,\n    marginBottom: 15\n  },\n  button: {\n    backgroundColor: 'blue',\n    padding: 20,\n    borderRadius: 5,\n    margin: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n});\n"],"sourceRoot":""}